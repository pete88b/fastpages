{
  
    
        "post0": {
            "title": "Things you might not know you can do with nbdev",
            "content": "Introduction . Until the next version of nbdev is released to pypi, you&#39;ll need to use an editable install of nbdev for everything in this blog to work. . What follows is a collection of things I&#39;ve learned while trying to help answer questions on the forum, fix issues and introduce magic flags. Hope it helps to know that you can ... . Export a if __name__ == &quot;__main__&quot; clause . I&#39;d recommend using console scripts wherever you can - but if you want your modules to run something when invoked directly, if __name__ == &quot;__main__&quot; could be the answer. . Anything you %nbdev_export gets written to your .py - so you could write a cell like: . %nbdev_export try: from nbdev.imports import IN_NOTEBOOK except: IN_NOTEBOOK=False if __name__ == &quot;__main__&quot; and not IN_NOTEBOOK: print(&#39;Running &quot;command line&quot; logic ...&#39;) . Note: . We need the not IN_NOTEBOOK check because __name__ == &quot;__main__&quot; when running in a notebook | We put the IN_NOTEBOOK import in a try catch so that your module doesn&#39;t have a dependency on nbdev | . Use multiple flags in a cell . Most flags can be used in combination with other flags. Here&#39;s a couple of combinations that might be useful: . You can hide input and collapse output with %nbdev_hide_input and %nbdev_collapse_output | You can hide a cell and specify a test flag with %nbdev_hide and %nbdev_slow_test | . Note: You can&#39;t put multiple flags on the same line. . There are a few things that are not supported yet, such as: . You can collapse input or output but not both If nbdev finds both %nbdev_collapse_input and %nbdev_collapse_output it will ignore %nbdev_collapse_output | . | . Remove all special comments / flags from the docs . You might have seen special comments in your docs. This can happen if the special comment is not the 1st thing in the cell: . # hiding the input of this cell as the output is more important # collapse-hide # let&#39;s run some code ... some_code(&#39;here&#39;) . This &uarr; cell would get converted to &darr; in the docs. . # collapse-hide # let&#39;s run some code ... some_code(&#39;here&#39;) . Converting your project to use magic flags with nbdev_upgrade would change the cell to: . # hiding the input of this cell as the output is more important %nbdev_collapse_input # let&#39;s run some code ... some_code(&#39;here&#39;) . Which gets converted to &darr; in the docs. . # let&#39;s run some code ... some_code(&#39;here&#39;) . Write to a module that is created &quot;later&quot; . Lets say we have 2 notebooks: . 00_core.ipynb Which contains %nbdev_default_export core to create core.py | . | 01_data.ipynb Which contains %nbdev_default_export data to create data.py | . | . It used to be the case that writing a cell in 00_core.ipynb that exports to data would cause problems: . %nbdev_export data def some_data_func(): that_we_also_want_to_use in [&#39;the core notebook&#39;] . nbdev is totally happy with this now. . This change has also made it possible to use the same %nbdev_default_export in multiple notebooks. I&#39;m not recommending that you do this but ... you can write to the same module from multiple notebooks. . Exclude a single notebook from doc builds . You can do simple exclusions with glob. The following command include all .ipynb files unless they start with 2: . nbdev_build_docs --fname=[!2]*.ipynb . It&#39;s worth remembering that nbdev will ignore any file that starts with an underscore - I use this all the time with _tmp in .gitignore. . Hide markdown cells from the docs . Apart from #hide and %nbdev_hide, nbdev will ignore flags that are not in code cells. This means that you can use markdown cells for &quot;developer-only&quot; details and #hide them from the HTML docs. . Put any number of test flags in a cell . Lets say you have tst_flags = slow|cuda in settings.ini so that you can flag test as being slow or needing a GPU. If you need to flag a test as being both slow and needing a GPU, you can: . %nbdev_slow_test %nbdev_cuda_test tst_result=long_running_fn() . Currently, only one test flag can be applied to all cells in a notebook. So if you had &darr; only the slow test flag would be picked up: . %nbdev_slow_test all %nbdev_cuda_test all . Create code coverage reports . We can run tests in parallel and get coverage with pytest-cov. . If you&#39;d like to try this: . install pytest-cov and its dependencies | copy test_nbs.py to your nbdev project | then run pytest --cov=[your lib name] | . Feel free to join the discussion (o: . When running tests, nbdev runs all cells in a notebook . Currently, when you nbdev_test_nbs, nbdev will run your notebooks from top to bottom. . A consequence of this is that if you have . 00_core.ipynb that contains %nbdev_default_export core, | nbdev_test_nbs --fname 00_core.ipynb will not test core.py. | . While test_nbs.py might look a little complicated, it means that nbdev_test_nbs --fname 00_core.ipynb will test core.py and you get accurate coverage data. . Code coverage tells you what you definitely haven&#39;t tested, not what you have . I really like this &uarr; quote from Mark Simpson . While there are lots of good uses of coverage reports, I&#39;ve seen them do more harm than good to projects when used as a strict quality measure. I really like the fastai style of writing tests that show how code can be used, then focusing on functional coverage. . Use %nbdev_add2all in place of _all_ . Sometimes objects are not picked to be automatically added to the __all__ of the module so you will need to add them manually. To do so, create an exported cell with the following code %nbdev_add2all &quot;name&quot;, &quot;name2&quot; . Please note: . elements in %nbdev_add2all can be space and/or comma separated and don&#39;t have to be quoted# &#39;func&#39;, &#39;func2&#39; and &#39;func3&#39; will be added to `__all__` %nbdev_add2all func, func2 func3 # you&#39;ll see warnings if any unquoted function names can&#39;t be found . | elements on a new line will not be added to __all__# &#39;func2&#39; won&#39;t get added to `__all__` %nbdev_add2all &#39;func&#39;, &#39;func2&#39; . | only the first %nbdev_add2all in a cell will get picked up%nbdev_add2all [&#39;func&#39;] # `func2` won&#39;t get added to `__all__` %nbdev_add2all [&#39;func2&#39;] . | but you can have any number of %nbdev_add2alls in a notebook by putting them in different cells. | . I&#39;m not recommending that you do this but ... as long as you have only one _all_ or %nbdev_add2all in an exported cell, you can put any other code you like in this cell. . For more exmaples, please see this demo page . Use code completion when adding to __all__ . It used to be the case that using unquoted names in _all_ caused problems: . %nbdev_export _all_ = [func, func2 func3] . This &uarr; will work fine now as names get quoted when writing to your library &darr;: . __all__ = [&#39;other&#39;,&#39;things&#39;,&#39;you&#39;,&#39;have&#39;,&#39;exported&#39;,&#39;func&#39;,&#39;func2&#39;,&#39;func3&#39;] . Import anything needed by show_doc . When building docs, nbdev runs all show_doc and %nbdev_show_doc cells so that stale output doesn&#39;t make it into your docs. . So that names are available when making show_doc calls, nbdev runs cells containing: . a &quot;library import&quot; (zero indent import from current library) e.g. from LIB_NAME.core import * | . If running these cells raises an exception, the build will stop. . nbdev also runs cells containing zero indented imports. e.g. . from module import * or | import module | . If running these cells raises an exception, the build will not stop. . If you need to show_doc something, please make sure it&#39;s imported via a cell that does not depend on previous cells being run. The easiest way to do this is to use a cell that contains nothing but imports. . Use %nbdev_show_doc to . For me, one of the best things about show_doc is not having to use it (o: because nbdev automatically adds show_doc for exported functions and classes. . To make it possible to do everything via magic flags and provide a few shortcuts, we&#39;ve added %nbdev_show_doc. While show_doc will most often be the best choice, here are a few ways in which %nbdev_show_doc can help: . Here are a few lines from 00_torch_core.ipynb: . show_doc(TitledInt, title_level=3) . show_doc(TitledStr, title_level=3) . show_doc(TitledFloat, title_level=3) . That could be written with one %nbdev_show_doc: . %nbdev_show_doc TitledInt,TitledStr,TitledFloat,title_level=3 . Here are some of the DataLoaders show_doc calls from 03_data.core.ipynb: . show_doc(DataLoaders.train, name=&quot;DataLoaders.train&quot;) . show_doc(DataLoaders.valid, name=&quot;DataLoaders.valid&quot;) . This &uarr; is not typical fastai - which might make it a good time to quote Sylvain:&quot;I&#39;m less convinced by %nbdev_show_doc since it mostly seems useful for calling show_doc on several functions at once and we usually insert markdown between two show_doc calls&quot;. Having said that (o: all of the DataLoaders show_doc calls could be written with one %nbdev_show_doc without having to pass name=: . %nbdev_show_doc DataLoaders . __getitem__ train valid train_ds valid_ds . Or even more succinctly as: . . In the example above &#8593; . The * tells nbdev_show_doc to show all public members but ... | we dont show the output for all members here as it&#39;s quite a long list | . For more examples, please see this demo page .",
            "url": "https://pete88b.github.io/fastpages/nbdev/fastai/jupyter/2020/07/24/nbdev-deep-dive.html",
            "relUrl": "/nbdev/fastai/jupyter/2020/07/24/nbdev-deep-dive.html",
            "date": " • Jul 24, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "nbdev is getting a little %magic",
            "content": "Overview . nbdev is progressively getting magic commands that will eventually replace the special comments it currently uses, so you get autocomplete and documentation: . . You&#39;ll also get feedback when flags are used incorrectly: . . How do I start using magic flags? . Grab an editable install of nbdev then run nbdev_upgrade from the command line - this will update notebooks that use comment flags like: . #export special.module . to use magic flags: . %nbdev_export special.module . To make magic flags work, nbdev_upgrade might need to add a new code cell to the top of the notebook: . from nbdev import * . You can run nbdev_upgrade any number of times - which means you can update the same project every time new magic flags get added to nbdev. . Can I use both comment and magic flags? . Both comment and magic flags are currently supported and you can use both kinds in the same notebook. . Why can&#39;t I see any &quot;test&quot; flags? . If you don&#39;t see the test flags you need ... . . ... you&#39;ll probably need to update settings.ini then restart your notebook. . Test flags are configured in your settings.ini (set tst_flags, separating flags by a | if you have several of them). . When the nbdev.flags module is imported, test flags are created dynamically from your settings.ini. If tst_flags=slow|gpu, the following flags would be available: . %nbdev_slow_test %nbdev_gpu_test . Can I use flags in any kind of cell? . Apart from #hide and %nbdev_hide, nbdev will ignore flags that are not in code cells. This means that you can use markdown cells for &quot;developer-only&quot; details and #hide them from the HTML docs. . Do magic flags work differently to comment flags? . Ideally, they would work the same but ... there is a difference when nbdev splits the source of a cell into flags and code; . If no magic flags are found, treat the first comment line as a flag . . If magic flags are found, the flags part can contain multiple lines . . This could make a difference because nbdev writes just the code part to both your library and HTML docs. . How do comment flags correspond to magic flags? . Comment flag Magic flag . default_exp | nbdev_default_export | Define the name of the module everything should be exported in | . exports | nbdev_export_and_show | Export and show code in the docs | . exporti | nbdev_export_internal | Export but don’t show in docs and don’t add to __all__ | . export | nbdev_export | Export but don’t show in docs | . hide_input | nbdev_hide_input | Do not show input of a test cell in docs | . hide_output | nbdev_hide_output | Do not show output of a test cell in docs | . hide | nbdev_hide | Do not show a test cell or markdown in docs | . default_cls_lvl | nbdev_default_class_level | Define the default toc level of classes | . collapse_output or collapse-output | nbdev_collapse_output | Inlcude output in the docs under a collapsable element | . collapse_show or collapse-show | nbdev_collapse_input open | Inlcude intput in the docs under a collapsable element that is open by default | . collapse_hide or collapse-hide | nbdev_collapse_input | Inlcude intput in the docs under a collapsable element | . collapse | nbdev_collapse_input | Inlcude intput in the docs under a collapsable element | . Why might we add magic flags for _all_ and show_doc? . One of the reasons for suggesting this is so that everything can be done via magic flags - rather than using flags for everything except _all_ and show_doc. . %nbev_add2__all__ . here&#39;s what we do today . _all_ = [&#39;progress_bar&#39;,&#39;master_bar&#39;] . but we could ... . %nbev_add2__all__ progress_bar,master_bar . This flag could . check that everything exists and names are valid (when the cell is executed) and | make it possible to tab-complete the items you&#39;re adding to __all__ | . . The example above uses a line magic, so you&#39;d have to move everything on line 3 up to line 2 but ... we could use a cell magic . %nbev_show_doc . here&#39;s what we do today . # nbdev removes show_doc cells, so we need to use a alias show__doc = show_doc . show__doc(ArithmeticError) . class ArithmeticError[source] . ArithmeticError() :: Exception . Base class for arithmetic errors. . show__doc(ArithmeticError.mro) . ArithmeticError.mro[source] . ArithmeticError.mro() . Return a type&#39;s method resolution order. . show__doc(ArithmeticError.__init__) . ArithmeticError.__init__[source] . ArithmeticError.__init__(*args, **kwargs) . Initialize self. See help(type(self)) for accurate signature. . but we could ... . %nbev_show_doc ArithmeticError mro __init__ . class ArithmeticError[source] . ArithmeticError() :: Exception . Base class for arithmetic errors. . ArithmeticError.mro[source] . ArithmeticError.mro() . Return a type&#39;s method resolution order. . ArithmeticError.__init__[source] . ArithmeticError.__init__(*args, **kwargs) . Initialize self. See help(type(self)) for accurate signature. . This flag could make it possible to &quot;show doc&quot; a class and any number of its methods with a single line of code. .",
            "url": "https://pete88b.github.io/fastpages/nbdev/fastai/jupyter/2020/06/02/nbdev-magic.html",
            "relUrl": "/nbdev/fastai/jupyter/2020/06/02/nbdev-magic.html",
            "date": " • Jun 2, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://pete88b.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://pete88b.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://pete88b.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}