{
  
    
        "post0": {
            "title": "nbdev is getting a little %magic",
            "content": "Overview . nbdev is progressively getting magic commands that will eventually replace the special comments it currently uses, so you get autocomplete and documentation: . . You&#39;ll also get feedback when flags are used incorrectly: . . How do I start using magic flags? . Grab an editable install of nbdev then run nbdev_upgrade from the command line - this will update notebooks that use comment flags like: . #export special.module . to use magic flags: . %nbdev_export special.module . To make magic flags work, nbdev_upgrade might need to add a new code cell to the top of the notebook: . from nbdev import * . You can run nbdev_upgrade any number of times - which means you can update the same project every time new magic flags get added to nbdev. . Can I use both comment and magic flags? . Both comment and magic flags are currently supported and you can use both kinds in the same notebook. . Why can&#39;t I see any &quot;test&quot; flags? . If you don&#39;t see the test flags you need ... . . ... you&#39;ll probably need to update settings.ini then restart your notebook. . Test flags are configured in your settings.ini (set tst_flags, separating flags by a | if you have several of them). . When the nbdev.flags module is imported, test flags are created dynamically from your settings.ini. If tst_flags=slow|gpu, the following flags would be available: . %nbdev_slow_test %nbdev_gpu_test . Can I use flags in any kind of cell? . Apart from #hide and %nbdev_hide, nbdev will ignore flags that are not in code cells. This means that you can use markdown cells for &quot;developer-only&quot; details and #hide them from the HTML docs. . Do magic flags work differently to comment flags? . Ideally, they would work the same but ... there is a difference when nbdev splits the source of a cell into flags and code; . If no magic flags are found, treat the first comment line as a flag . . If magic flags are found, the flags part can contain multiple lines . . This could make a difference because nbdev writes just the code part to both your library and HTML docs. . How do comment flags correspond to magic flags? . Comment flag Magic flag . default_exp | nbdev_default_export | Define the name of the module everything should be exported in | . exports | nbdev_export_and_show | Export and show code in the docs | . exporti | nbdev_export_internal | Export but don’t show in docs and don’t add to __all__ | . export | nbdev_export | Export but don’t show in docs | . hide_input | nbdev_hide_input | Do not show input of a test cell in docs | . hide_output | nbdev_hide_output | Do not show output of a test cell in docs | . hide | nbdev_hide | Do not show a test cell or markdown in docs | . default_cls_lvl | nbdev_default_class_level | Define the default toc level of classes | . collapse_output or collapse-output | nbdev_collapse_output | Inlcude output in the docs under a collapsable element | . collapse_show or collapse-show | nbdev_collapse_input open | Inlcude intput in the docs under a collapsable element that is open by default | . collapse_hide or collapse-hide | nbdev_collapse_input | Inlcude intput in the docs under a collapsable element | . collapse | nbdev_collapse_input | Inlcude intput in the docs under a collapsable element | . Why might we add magic flags for _all_ and show_doc? . One of the reasons for suggesting this is so that everything can be done via magic flags - rather than using flags for everything except _all_ and show_doc. . %nbev_add2__all__ . here&#39;s what we do today . _all_ = [&#39;progress_bar&#39;,&#39;master_bar&#39;] . but we could ... . %nbev_add2__all__ progress_bar,master_bar . This flag could . check that everything exists and names are valid (when the cell is executed) and | make it possible to tab-complete the items you&#39;re adding to __all__ | . . The example above uses a line magic, so you&#39;d have to move everything on line 3 up to line 2 but ... we could use a cell magic . %nbev_show_doc . here&#39;s what we do today . # nbdev removes show_doc cells, so we need to use a alias show__doc = show_doc . show__doc(ArithmeticError) . class ArithmeticError[source] . ArithmeticError() :: Exception . Base class for arithmetic errors. . show__doc(ArithmeticError.mro) . ArithmeticError.mro[source] . ArithmeticError.mro() . Return a type&#39;s method resolution order. . show__doc(ArithmeticError.__init__) . ArithmeticError.__init__[source] . ArithmeticError.__init__(*args, **kwargs) . Initialize self. See help(type(self)) for accurate signature. . but we could ... . %nbev_show_doc ArithmeticError mro __init__ . class ArithmeticError[source] . ArithmeticError() :: Exception . Base class for arithmetic errors. . ArithmeticError.mro[source] . ArithmeticError.mro() . Return a type&#39;s method resolution order. . ArithmeticError.__init__[source] . ArithmeticError.__init__(*args, **kwargs) . Initialize self. See help(type(self)) for accurate signature. . This flag could make it possible to &quot;show doc&quot; a class and any number of its methods with a single line of code. .",
            "url": "https://pete88b.github.io/fastpages/nbdev/fastai/jupyter/2020/06/02/nbdev-magic.html",
            "relUrl": "/nbdev/fastai/jupyter/2020/06/02/nbdev-magic.html",
            "date": " • Jun 2, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://pete88b.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://pete88b.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://pete88b.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}